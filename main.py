# 模块开发集合from config import configfrom logger import getLoggerfrom filer import FileFilterimport datetimeimport sysimport tracebackimport reimport timelogger = getLogger()  # loger initializationff = FileFilter(config['date'])  # File filter initializationif __name__ == "__main__":    startDay = '{}'.format(datetime.date.today())    while True:        # Current program running time        nowDay = '{}'.format(datetime.date.today())        # The program restarts once a day in the early morning        if startDay != nowDay:            sys.exit(0)        # loading        files = ff.newFile(config['path']['inputpath'])        logger.info(            'After sleeping for {} seconds, {} files were found'.format(                config['date']['sleepTime'], len(files)))        #rocessing data        try:            for file in files:                fileName = re.split('/', file)[-1]                if len(file) > 0:                    logger.info('Start processing files {}'.format(file))                    df = ff.readFile(file, inputClomuns)                    # save file                    ff.saveFile(                        df,                        os.path.join(config['path']['outpath'], fileName),                        config['colname']['outcol'],                        file)                    logger.info('Saving files {}'.format(file))                else:                    logger.info(                        'File is empty...,move file to specified errfile..')                    ff.mvFile(file, config['path']['errpath'])        except Exception as e:            logger.info('Data processing exception, skip...')            logger.info(traceback.print_exc())        logger.info('sleep {}s'.format(config['date']['sleepTime']))        time.sleep(config['date']['sleepTime'])